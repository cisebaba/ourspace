stages:
  - test   # Run tests first
  - build  # Run build after tests
  - deploy # Run deploy after build

services:
  - postgres:14.2-bullseye

variables:
  POSTGRES_PASSWORD: test
  DATABASE_URL: postgresql://postgres:test@postgres:5432/postgres
  DJWTO_SIGNING_KEY: 1435e80f9a1c4c54a59f27d42743e016356036c4a0d955e0cd56318af53be578
  SECRET_KEY: 1435e80f9a1c4c54a59f27d42743e016356036c4a0d955e0cd56318af53be578

test-accounts-api:
  image: python:3-bullseye
  stage: test
  script:
    - cd accounts/api
    - pip install -r requirements.txt
    - python -m pytest

test-events-api:
  image: python:3-bullseye
  stage: test
  script:
    - cd events/api
    - pip install -r requirements.txt
    - python manage.py test

test-forum-api:
  image: python:3-bullseye
  stage: test
  script:
    - cd forum/api
    - pip install -r requirements.txt
    - python -m pytest

# # No tests in jobs
# test-jobs-api:
#   image: python:3-bullseye
#   stage: test
#   script:
#     - cd jobs/api
#     - pip install -r requirements.txt
#     - python -m pytest

test-mentorship-api:
  image: python:3-bullseye
  stage: test
  script:
    - cd mentorship/api
    - pip install -r requirements.txt
    - python -m pytest

test-reviews-api:
  image: python:3-bullseye
  stage: test
  script:
    - cd reviews/api
    - pip install -r requirements.txt
    - python -m pytest

lint-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 accounts events forum jobs mentorship reviews

build-front-end-job:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: node:lts-bullseye
  script:
    - cd ghi
    - npm install
    - npm run build
  artifacts:
    paths:
      - ghi/build/ 

build-back-end-job:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd api
    - docker build -t ${CI_REGISTRY_IMAGE}/app:latest .
    - docker tag ${CI_REGISTRY_IMAGE}/app:latest ${CI_REGISTRY_IMAGE}/app:$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/app:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/app:latest

deploy-back-end-job-heroku:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: deploy
  needs:
    - build-back-end-job
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker pull ${CI_REGISTRY_IMAGE}/api:latest
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker tag ${CI_REGISTRY_IMAGE}/api:latest registry.heroku.com/$HEROKU_STAGING_APP/web:latest
    - docker push registry.heroku.com/$HEROKU_STAGING_APP/web:latest

heroku-release:
  stage: deploy
  image: node:10.17-alpine
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - deploy-back-end-job-heroku
  before_script:
    - apk add curl bash
    - curl https://cli-assets.heroku.com/install.sh | sh
  script:
    - heroku container:release web --app $HEROKU_STAGING_APP

pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-front-end-job
  needs:
    - build-front-end-job
  script:
    - mv ghi/build public
  artifacts:
    paths:
      - public
